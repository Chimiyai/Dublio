// This is your Prisma schema file for Dublio v1.0
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // Geliştirme için sqlite, production için postgresql kullanacağız.
  // env("DATABASE_URL") üzerinden yönetilecek.
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// =================================================================
// BÖLÜM 1: ENUMLAR (Merkezi Tip Tanımları)
// =================================================================

enum ContentType {
  GAME
  ANIME
  MANGA
}

enum ProjectStatus {
  RECRUITING // Ekip Toplanıyor
  IN_PROGRESS // Geliştirme Aşamasında
  COMPLETED // Tamamlandı
  ON_HOLD // Duraklatıldı
  CANCELED // İptal Edildi
}

enum TaskType {
  TRANSLATION // Çeviri
  VOICE_RECORDING // Ses Kaydı
  AUDIO_MIXING // Ses Miksajı
  PROOFREADING // Redaksiyon
  TEXTURE_EDIT // Doku Düzenleme
  TYPESETTING // Dizgi (Manga için)
  CLEANING // Temizleme (Manga için)
  QUALITY_ASSURANCE // Kalite Kontrol
  MODDING // Teknik Entegrasyon
}

enum TaskStatus {
  TODO // Yapılacak
  IN_PROGRESS // Yapılıyor
  IN_REVIEW // Gözden Geçiriliyor
  DONE // Tamamlandı
}

enum DemoType {
  AUDIO
  VIDEO
  IMAGE
}

enum TransactionType {
  DEPOSIT // Kredi Yükleme
  PURCHASE // Satın Alma
  REWARD // Ödül
  TEAM_FEE // Ekip Kurma Ücreti
  DONATION // Bağış
}

enum NotificationType {
  SYSTEM_ANNOUNCEMENT
  PROJECT_UPDATE
  TEAM_INVITATION
  NEW_MESSAGE
  TASK_ASSIGNMENT
  COMMENT_REPLY
}

// =================================================================
// BÖLÜM 2: KULLANICI, KİMLİK VE EKONOMİ
// =================================================================

// 2.1 `User`: Platformdaki her birey. NextAuth ile uyumlu.
model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  username     String   @unique
  password     String? // Sosyal medya girişi için opsiyonel
  role         String   @default("USER") // USER, PREMIUM_USER, ADMIN, MODERATOR
  profileImage String? // Cloudinary URL
  bannerImage  String? // Cloudinary URL
  bio          String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  isBanned     Boolean  @default(false)

  // --- İlişkiler ---
  // NextAuth
  accounts Account[]
  sessions Session[]

  // Dublio
  wallet                  Wallet?
  skills                  UserSkill[]
  demos                   UserDemo[]
  ownedTeams              Team[]                    @relation("TeamOwner")
  teamMemberships         TeamMember[]
  assignedTasks           TaskAssignee[]
  comments                Comment[]
  interactions            Interaction[]
  userNotifications       UserNotification[]
  sentReports             Report[]                  @relation("Reporter")
  receivedReports         Report[]                  @relation("Reported")
  sentInvitations         TeamInvitation[]          @relation("SentInvitations")
  receivedInvitations     TeamInvitation[]          @relation("ReceivedInvitations")
  conversationMemberships ConversationParticipant[]

  @@map("users")
}

// 2.2 `Account`: NextAuth için. Değişiklik yok.
model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// 2.3 `Session`: NextAuth için. Değişiklik yok.
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// 2.4 `VerificationToken`: NextAuth için. Değişiklik yok.
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// 2.5 `Wallet`: Kullanıcıların kredi cüzdanı.
model Wallet {
  id           Int           @id @default(autoincrement())
  userId       Int           @unique
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  balance      Float         @default(0.00)
  transactions Transaction[]

  @@map("wallets")
}

// 2.6 `Transaction`: Tüm kredi hareketleri.
model Transaction {
  id          Int             @id @default(autoincrement())
  walletId    Int
  wallet      Wallet          @relation(fields: [walletId], references: [id])
  amount      Float
  type        TransactionType
  description String
  metadata    Json? // Ekstra veri (örn: { "purchased_item_id": 123, "item_type": "PREMIUM_MEMBERSHIP" })
  createdAt   DateTime        @default(now())

  @@map("transactions")
}

model Skill {
  id        Int      @id @default(autoincrement())
  name      String   @unique // 'Seslendirme'
  category  String   // 'SES', 'METİN', 'GÖRSEL', 'TEKNİK'
  
  userSkills UserSkill[]
  showcasedInDemos UserDemo[]
  @@map("skills")
}

model DemoCategory {
  id    Int    @id @default(autoincrement())
  name  String @unique // 'Oyun Dublajı', 'Anime Altyazı'
  
  demos UserDemo[] @relation("DemoToDemoCategory")
  @@map("demo_categories")
}

// 2.7 `UserSkill`: Kullanıcının kanıtlanmış yetenekleri.
model UserSkill {
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  skillId Int // skillName yerine skillId kullanacağız
  skill   Skill @relation(fields: [skillId], references: [id], onDelete: Cascade)

  // Artık bir kullanıcının bir yeteneği sadece bir kez olabilir
  @@id([userId, skillId])
  @@map("user_skills")
}

// 2.8 `UserDemo`: Kullanıcının portfolyosundaki işler.
model UserDemo {
  id          Int      @id @default(autoincrement())
  authorId    Int
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  title       String
  description String?
  type        DemoType
  url         String   // Şimdilik dosya yolu, sonra S3 URL'i olacak
  createdAt   DateTime @default(now())
  
  // YENİ İLİŞKİLER
  // Bu demonun hangi ana içerik için yapıldığı (opsiyonel)
  contentId   Int?
  content     Content?  @relation(fields: [contentId], references: [id], onDelete: SetNull)

  // Bu demoda sergilenen yetenek
  showcasedSkillId Int?
  showcasedSkill   Skill? @relation(fields: [showcasedSkillId], references: [id], onDelete: SetNull)

  // Demoya ait kategoriler (çoktan çoğa)
  categories DemoCategory[] @relation("DemoToDemoCategory")
  
  @@map("user_demos")
}

// =================================================================
// BÖLÜM 3: EKİP VE PROJE YÖNETİMİ
// =================================================================

// 3.1 `Team`: Projeleri yürüten yaratıcı ekipler.
model Team {
  id              Int      @id @default(autoincrement())
  ownerId         Int
  owner           User     @relation("TeamOwner", fields: [ownerId], references: [id])
  name            String   @unique
  slug            String   @unique
  logoUrl         String? // Cloudinary URL
  bannerUrl       String? // Cloudinary URL
  description     String?
  motto           String?
  isRecruiting    Boolean  @default(false)
  specializations String?
  createdAt       DateTime @default(now())

  // İlişkiler
  members      TeamMember[]
  projects     Project[]
  invitations  TeamInvitation[]

  @@map("teams")
}

// 3.2 `TeamMember`: Ekip-Kullanıcı ara tablosu.
model TeamMember {
  teamId   Int
  team     Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  userId   Int
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role     String // "LEADER", "ADMIN", "MEMBER"
  joinedAt DateTime @default(now())

  @@id([teamId, userId])
  @@map("team_members")
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model TeamInvitation {
  id        Int              @id @default(autoincrement())
  teamId    Int
  team      Team             @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  invitedUserId Int
  invitedUser   User             @relation("ReceivedInvitations", fields: [invitedUserId], references: [id], onDelete: Cascade)
  
  inviterId Int
  inviter   User             @relation("SentInvitations", fields: [inviterId], references: [id], onDelete: Cascade)

  status    InvitationStatus @default(PENDING)
  createdAt DateTime         @default(now())

  @@unique([teamId, invitedUserId]) // Bir kullanıcı bir takıma sadece bir kez davet edilebilir (beklemedeyken)
  @@map("team_invitations")
}

// 3.3 `Content`: Yerelleştirilecek ana içerik (Oyun, Anime vb.).
model Content {
  id            Int         @id @default(autoincrement())
  title         String
  slug          String      @unique
  type          ContentType
  description   String?
  coverImageUrl String? // Cloudinary URL
  bannerUrl     String? // Cloudinary URL
  releaseDate   DateTime?
  metadata      Json? // Örn: { "developer": "CD Projekt Red", "publisher": "CDPR" }
  createdAt     DateTime    @default(now())

  projects     Project[]
  userDemos    UserDemo[]

  @@map("contents")
}

// 3.4 `Project`: Bir ekibin, bir içeriği yerelleştirme projesi.
model Project {
  id        Int           @id @default(autoincrement())
  teamId    Int
  team      Team          @relation(fields: [teamId], references: [id], onDelete: Cascade)
  contentId Int
  content   Content       @relation(fields: [contentId], references: [id], onDelete: Cascade)
  name      String // Örn: "Cyberpunk 2077 - Türkçe Dublaj Projesi"
  status    ProjectStatus @default(RECRUITING)
  isPublic  Boolean       @default(true)
  createdAt DateTime      @default(now())

  tasks        Task[]
  packages     PackageVersion[]
  comments     Comment[]

  @@unique([teamId, contentId]) // Bir ekip, bir içeriği sadece bir kere projelendirebilir.
  @@map("projects")
}

// =================================================================
// BÖLÜM 4: PROJE STÜDYOSU İŞ AKIŞI
// =================================================================

// 4.1 `Task`: Projelerdeki görevler.
model Task {
  id          Int        @id @default(autoincrement())
  projectId   Int
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  title       String
  description String?
  type        TaskType
  status      TaskStatus @default(TODO)
  dueDate     DateTime?
  payload     Json? // Göreve özel veri, örn: çeviri satırları, ses dosyası referansı
  createdAt   DateTime   @default(now())

  assignees TaskAssignee[]
  comments  Comment[]

  @@map("tasks")
}

// 4.2 `TaskAssignee`: Görev-Kullanıcı ara tablosu.
model TaskAssignee {
  taskId Int
  task   Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([taskId, userId])
  @@map("task_assignees")
}

// 4.3 `PackageVersion`: Tamamlanmış paketlerin yayın sürümleri.
model PackageVersion {
  id            Int      @id @default(autoincrement())
  projectId     Int
  project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  version       String // "v1.0.1-beta"
  notes         String? // Sürüm notları
  fileUrl       String // Supabase Storage/S3 URL
  downloadCount Int      @default(0)
  createdAt     DateTime @default(now())

  bugReports   Report[]

  @@unique([projectId, version])
  @@map("package_versions")
}

// =================================================================
// BÖLÜM 5: TOPLULUK ETKİLEŞİMİ (Polimorfik)
// =================================================================

// 5.1 `Comment`: Platformdaki tüm yorumlar için tek model.
model Comment {
  id        Int      @id @default(autoincrement())
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  content   String
  createdAt DateTime @default(now())

  // Polimorfik ilişki için alanlar
  targetType String // "PROJECT", "TEAM", "CONTENT", "USER_DEMO", "TASK"
  targetId   Int

  // Cevap sistemi
  parentId Int?
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies  Comment[] @relation("CommentReplies")

  // İlişkiler
  project Project? @relation(fields: [targetId], references: [id], onDelete: Cascade) // Bu ve alttakiler opsiyonel
  task    Task?    @relation(fields: [targetId], references: [id], onDelete: Cascade)

  @@map("comments")
}

// 5.2 `Interaction`: Beğeni, favori gibi tüm etkileşimler için tek model.
enum InteractionType {
  LIKE
  FAVORITE
}

model Interaction {
  userId Int
  user   User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  type   InteractionType

  // Polimorfik ilişki için alanlar
  targetType String // "PROJECT", "TEAM", "CONTENT", "USER_DEMO", "COMMENT", "PACKAGE_VERSION"
  targetId   Int

  createdAt DateTime @default(now())

  @@id([userId, type, targetType, targetId])
  @@map("interactions")
}

// 5.3 `Notification` & `UserNotification`: Bildirim sistemi.
model Notification {
  id        Int              @id @default(autoincrement())
  type      NotificationType
  content   Json // Bildirim içeriği, örn: { "message": "Eren sizi X projesine davet etti.", "link": "/teams/..." }
  createdAt DateTime         @default(now())

  userNotifications UserNotification[]

  @@map("notifications")
}

model UserNotification {
  userId         Int
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  notificationId Int
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  isRead         Boolean      @default(false)

  @@id([userId, notificationId])
  @@map("user_notifications")
}

// 5.4 `Message`: Direkt ve Grup mesajları.
model Conversation {
  id           Int      @id @default(autoincrement())
  isGroup      Boolean  @default(false)
  groupName    String?
  groupIconUrl String?
  createdAt    DateTime @default(now())

  participants ConversationParticipant[]
  messages     Message[]

  @@map("conversations")
}

model ConversationParticipant {
  conversationId Int
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  userId         Int
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages       Message[]

  @@id([conversationId, userId])
  @@map("conversation_participants")
}

model Message {
  id             Int @id @default(autoincrement())
  conversationId Int
  senderId       Int

  // Bir mesaj, bir konuşmadaki TEK bir katılımcıya aittir.
  // Bu ilişki, [conversationId, senderId] çiftini kullanarak, 
  // ConversationParticipant tablosundaki bir kayda bağlanır.
  sender       ConversationParticipant @relation(fields: [conversationId, senderId], references: [conversationId, userId], onDelete: Cascade, onUpdate: Cascade)
  conversation Conversation            @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  content   String
  createdAt DateTime @default(now())

  @@map("messages")
}

// 5.5 `Report`: Hata veya kullanıcı raporlama.
enum ReportType {
  BUG_REPORT // Hata Raporu
  USER_REPORT // Kullanıcı Şikayeti
}

enum ReportStatus {
  OPEN
  IN_PROGRESS
  CLOSED
  WONT_FIX
}

model Report {
  id          Int          @id @default(autoincrement())
  reporterId  Int
  reporter    User         @relation("Reporter", fields: [reporterId], references: [id], onDelete: Cascade)
  type        ReportType
  status      ReportStatus @default(OPEN)
  title       String
  description String

  // Polimorfik rapor hedefi
  targetType String? // "PACKAGE_VERSION", "USER"
  targetId   Int?

  // İlişkiler
  reportedUser   User?           @relation("Reported", fields: [targetId], references: [id], onDelete: Cascade)
  packageVersion PackageVersion? @relation(fields: [targetId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("reports")
}