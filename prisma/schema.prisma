// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client" // Doğru output yolu
}

// --- ENUM Doğru ---
enum RoleInProject {
  VOICE_ACTOR
  MIX_MASTER
  MODDER
  TRANSLATOR
  SCRIPT_WRITER
  DIRECTOR
}
// -------------------

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int      @id @default(autoincrement())
  email                  String   @unique
  username               String   @unique
  password               String
  role                   String   @default("user")
  profileImagePublicId   String?
  bannerImagePublicId    String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  sentMessages           Message[] @relation("SentMessages")     
  receivedMessages        Message[] @relation("ReceivedMessages")
  emailChangeRequests    EmailChangeRequest[]

  @@map("users")
}

model EmailChangeRequest {
  id        Int      @id @default(autoincrement())
  userId    Int
  newEmail  String
  token     String   @unique // Hash'lenmiş token saklanacak
  expiresAt DateTime // Token geçerlilik süresi
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) // User ile ilişki

  @@index([userId])
  @@map("email_change_requests")
}

model Project {
  id            Int                 @id @default(autoincrement())
  title         String
  slug          String              @unique
  type          String
  description   String?
  coverImagePublicId    String?
  bannerImagePublicId String?
  releaseDate   DateTime?            @default(now())
  isPublished   Boolean             @default(true)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  assignments   ProjectAssignment[] // İlişki doğru

  @@map("projects")
}

model Message {
  id         Int      @id @default(autoincrement())
  content    String
  createdAt  DateTime @default(now())
  senderId   Int
  sender     User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId Int
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model DubbingArtist {
  id              Int      @id @default(autoincrement())
  firstName       String
  lastName        String
  bio             String?
  imagePublicId   String?  // BU ALANIN VARLIĞI VE DOĞRU YAZILDIĞI ÇOK ÖNEMLİ
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  assignments     ProjectAssignment[]

  @@map("dubbing_artists")
}


// --- ProjectAssignment Modelini Düzeltelim ---
model ProjectAssignment {
  id         Int      @id @default(autoincrement())
  assignedAt DateTime @default(now())
  
  role       RoleInProject // BU ALAN KESİNLİKLE OLMALI

  projectId  Int
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  artistId   Int
  artist     DubbingArtist @relation(fields: [artistId], references: [id], onDelete: Cascade)

  @@unique([projectId, artistId, role])
  @@index([projectId]) 
  @@index([artistId])  
  @@map("project_assignments")
}
// ------------------------------------------