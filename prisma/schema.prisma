// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client" // Doğru output yolu
}

// --- ENUM Doğru ---
enum RoleInProject {
  VOICE_ACTOR
  MIX_MASTER
  MODDER
  TRANSLATOR
  SCRIPT_WRITER
  DIRECTOR
}

// -------------------

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int                     @id @default(autoincrement())
  email                  String                  @unique
  username               String                  @unique
  password               String
  role                   String                  @default("user")
  profileImagePublicId   String?
  bannerImagePublicId    String?
  bio                    String?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  sentMessages           Message[]               @relation("SentMessages")
  receivedMessages       Message[]               @relation("ReceivedMessages")
  emailChangeRequests    EmailChangeRequest[]
  comments               Comment[]
  dubbingArtistLikes     DubbingArtistLike[]
  dubbingArtistFavorites DubbingArtistFavorite[]
  projectLikes           ProjectLike[]
  projectDislikes        ProjectDislike[]
  projectFavorites       ProjectFavorite[]
  projectRatings         ProjectRating[]
  ownedGames             UserOwnedGame[] // Kullanıcının sahip olduğu oyunlar

  @@map("users")
}

model EmailChangeRequest {
  id        Int      @id @default(autoincrement())
  userId    Int
  newEmail  String
  token     String   @unique // Hash'lenmiş token saklanacak
  expiresAt DateTime // Token geçerlilik süresi
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // User ile ilişki

  @@index([userId])
  @@map("email_change_requests")
}

model Project {
  id                  Int       @id @default(autoincrement())
  title               String
  slug                String    @unique
  type                String // "oyun" veya "anime" (filtrelenmiş section başlığı için kalabilir)
  description         String?
  coverImagePublicId  String?
  bannerImagePublicId String?
  externalWatchUrl    String?
  releaseDate         DateTime? @default(now())
  isPublished         Boolean   @default(true)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  viewCount     Int   @default(0)
  likeCount     Int   @default(0)
  dislikeCount  Int   @default(0)
  favoriteCount Int   @default(0)
  averageRating Float @default(0)
  ratingCount   Int   @default(0)

  trailerUrl          String?

  assignments ProjectAssignment[]
  likes       ProjectLike[]
  dislikes    ProjectDislike[]
  favorites   ProjectFavorite[]
  ratings     ProjectRating[]
  comments    Comment[]

  // YENİ: Kategorilerle çoktan çoğa ilişki
  categories ProjectCategory[] // Bir projenin birden fazla kategorisi olabilir

  price        Float? // Oyunun fiyatı, null ise ücretsiz veya satılık değil
  currency     String?         @default("TRY") // Para birimi
  ownedByUsers UserOwnedGame[]
  ProjectImage ProjectImage[]

  // YENİ EKLENEN ALAN: Bu projeye ait karakterler
  characters ProjectCharacter[] // ProjectCharacter modelindeki 'project' alanı ile zıt ilişki

  @@map("projects")
}

model ProjectImage {
  id        Int      @id @default(autoincrement())
  projectId Int
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  publicId  String // Cloudinary public ID
  caption   String? // Resim alt yazısı
  order     Int? // Resimlerin sıralaması için
  createdAt DateTime @default(now())

  @@index([projectId])
  @@map("project_images")
}

// KULLANICININ SAHİP OLDUĞU OYUNLAR İÇİN YENİ ARA TABLO
model UserOwnedGame {
  id            Int      @id @default(autoincrement())
  userId        Int
  projectId     Int // Sadece type='oyun' olan projeler için olmalı (uygulama seviyesinde kontrol)
  purchasedAt   DateTime @default(now())
  purchasePrice Float? // Satın alındığı andaki fiyat (opsiyonel, fiyat değişirse diye)

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId]) // Bir kullanıcı bir oyuna sadece bir kez sahip olabilir
  @@map("user_owned_games")
}

// YENİ MODEL: Kategori
model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique // Kategori adı (örn: Aksiyon, Macera, RPG)
  slug      String   @unique // Kategori slug'ı (URL için)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projects ProjectCategory[] // Bu kategoriye ait projeler

  @@map("categories")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  projectId Int
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  // Eğer yorumlara yanıt sistemi olacaksa:
  // parentId  Int?
  // parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  // replies   Comment[] @relation("CommentReplies")

  // Yorumlara beğeni/dislike eklenebilir (opsiyonel)
  // likes     CommentLike[] 

  @@index([userId])
  @@index([projectId])
  @@map("comments")
}

// YENİ ARA TABLO: ProjectCategory (Project ve Category arasında çoktan çoğa ilişki için)
model ProjectCategory {
  projectId  Int
  categoryId Int
  assignedAt DateTime @default(now())
  assignedBy String? // Opsiyonel: Kimin atadığı (admin kullanıcı adı vb.)

  project  Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([projectId, categoryId]) // Bileşik birincil anahtar
  @@map("project_categories")
}

// KULLANICI ETKİLEŞİM MODELLERİ

model ProjectLike {
  id        Int      @id @default(autoincrement())
  userId    Int
  projectId Int
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId]) // Bir kullanıcı bir projeyi sadece bir kere beğenebilir
  @@map("project_likes")
}

model ProjectDislike {
  id        Int      @id @default(autoincrement())
  userId    Int
  projectId Int
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId]) // Bir kullanıcı bir projeyi sadece bir kere beğenmeyebilir
  @@map("project_dislikes")
}

model ProjectFavorite {
  id        Int      @id @default(autoincrement())
  userId    Int
  projectId Int
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId]) // Bir kullanıcı bir projeyi sadece bir kere favorileyebilir
  @@map("project_favorites")
}

model ProjectRating {
  id        Int      @id @default(autoincrement())
  userId    Int
  projectId Int
  value     Int // Puan değeri (örn: 1-5 arası)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId]) // Bir kullanıcı bir projeye sadece bir kere puan verebilir
  @@map("project_ratings")
}

model Message {
  id         Int      @id @default(autoincrement())
  content    String
  createdAt  DateTime @default(now())
  senderId   Int
  sender     User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId Int
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model DubbingArtist {
  id            Int                     @id @default(autoincrement())
  firstName     String
  lastName      String
  slug          String?
  bio           String?
  imagePublicId String? // BU ALANIN VARLIĞI VE DOĞRU YAZILDIĞI ÇOK ÖNEMLİ
  siteRole      String?
  websiteUrl    String?
  twitterUrl    String?
  instagramUrl  String?
  youtubeUrl    String?
  linkedinUrl   String?
  githubUrl     String?
  donationLink  String?
  isTeamMember  Boolean                 @default(false)
  teamOrder     Int?
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  assignments   ProjectAssignment[]
  likeCount     Int     @default(0)
  favoriteCount Int     @default(0)
  likes         DubbingArtistLike[]
  favoritedBy   DubbingArtistFavorite[]

  @@map("dubbing_artists")
}

model DubbingArtistLike {
  id        Int      @id @default(autoincrement())
  userId    Int
  artistId  Int
  createdAt DateTime @default(now())

  user   User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  artist DubbingArtist @relation(fields: [artistId], references: [id], onDelete: Cascade)

  @@unique([userId, artistId])
  @@map("dubbing_artist_likes")
}

model DubbingArtistFavorite {
  id        Int      @id @default(autoincrement())
  userId    Int
  artistId  Int
  createdAt DateTime @default(now())

  user   User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  artist DubbingArtist @relation(fields: [artistId], references: [id], onDelete: Cascade)

  @@unique([userId, artistId])
  @@map("dubbing_artist_favorites")
}

model ProjectCharacter {
  id        Int      @id @default(autoincrement())
  projectId Int
  name      String // Karakterin adı (örn: "Kratos")
  // description String? // Karakter hakkında kısa bilgi (opsiyonel)
  // imagePublicId String? // Karakterin resmi (opsiyonel)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project          Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  // Bu karakteri seslendiren sanatçı atamaları (VoiceAssignment üzerinden)
  voiceAssignments VoiceAssignment[]

  @@unique([projectId, name]) // Bir projede aynı isimde birden fazla karakter olamaz
  @@index([projectId])
  @@map("project_characters")
}

// YENİ ARA TABLO: Seslendirme Sanatçısı - Proje Karakteri Eşleşmesi
model VoiceAssignment {
  id                  Int @id @default(autoincrement())
  projectAssignmentId Int // Hangi genel proje atamasına bağlı (VOICE_ACTOR rolü olmalı)
  projectCharacterId  Int // Hangi karakter seslendiriliyor

  // Notlar veya özel bilgiler eklenebilir (örn: "Genç Kratos Sesi")
  // assignmentNotes String? 

  assignment ProjectAssignment @relation("CharacterVoiceRoles", fields: [projectAssignmentId], references: [id], onDelete: Cascade)
  character  ProjectCharacter  @relation(fields: [projectCharacterId], references: [id], onDelete: Cascade)

  @@unique([projectAssignmentId, projectCharacterId]) // Bir "proje ataması" (sanatçı+proje+rol) bir karakteri bir kez seslendirir.
  @@index([projectAssignmentId])
  @@index([projectCharacterId])
  @@map("voice_assignments")
}

// --- ProjectAssignment Modelini Düzeltelim ---
model ProjectAssignment {
  id         Int      @id @default(autoincrement())
  assignedAt DateTime @default(now())

  role RoleInProject // BU ALAN KESİNLİKLE OLMALI

  projectId Int
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  artistId Int
  artist   DubbingArtist @relation(fields: [artistId], references: [id], onDelete: Cascade)

  voiceRoles VoiceAssignment[] @relation("CharacterVoiceRoles")

  @@unique([projectId, artistId, role])
  @@index([projectId])
  @@index([artistId])
  @@map("project_assignments")
}

// ------------------------------------------
